📓 AdNavi — Living Documentation (Root docs/, future-proofed)

Task
Create and maintain a single living Markdown document at the repo root that explains what we did, why, how, and with which dependencies. It must be ready for a frontend in ui/ and a future backend (TBD). The AI must read and update this doc on every change.

Create these paths

Directory: docs/ (at repository root)

File: docs/ADNAVI_BUILD_LOG.md

If the file is missing, create it using the template below.

Golden rules

Before any change: open & read docs/ADNAVI_BUILD_LOG.md.

After any meaningful change: update the doc:

Append a Changelog entry with ISO timestamp, summary, files touched.

Update Plan / Next Steps if priorities changed.

Record Dependencies added/removed (with reasons).

Capture/adjust Decisions (with context/trade-offs).

Keep Monorepo Map, Routes, Components Inventory, Mock Data, Known Gaps, Open Questions in sync.

If nothing changed: add a “No-op sync” entry with timestamp.

Acceptance criteria

docs/ exists at repo root and contains ADNAVI_BUILD_LOG.md.

The doc states that frontend lives in ui/ and reserves sections for a future backend and infra.

Every code change updates this doc accordingly.

A new dev can understand the project in minutes by reading it.

Initial template (use verbatim on first creation)
# AdNavi — Living Build Log

_Last updated: {{ISO_TIMESTAMP}}_

## 0) Monorepo Map (Current & Planned)
- **Frontend (current):** `ui/` — Next.js 15.5.4 (App Router), **JSX only**
- **Backend (planned):** `api/` — (TBD: FastAPI or .NET Web API) — not implemented yet
- **Shared packages (planned):** `packages/` — shared UI/components/types/utils
- **Docs (current):** `docs/` — this file + architecture notes
- **Infra (planned):** `infra/` — IaC, CI/CD, envs, deploy scripts

> This section must stay current as we add apps/packages.

---

## 1) Project Snapshot
- Framework: Next.js 15.5.4 (App Router, **JSX only**)
- Theme: Dark default
- Data: Mock only (no API/data fetching)
- Repo doc path: `docs/ADNAVI_BUILD_LOG.md`

### 1.1 Frontend — `ui/`
- Routing: `/` (Homepage), `/dashboard`
- Components: granular, presentational, mock props
- Charts: Recharts; Icons: lucide-react
- Styling: dark, rounded, soft shadows

### 1.2 Backend — `api/` (planned)
- Status: not implemented
- Candidates: FastAPI (Python) or .NET Web API
- Responsibilities (planned): auth, data aggregation, ads connectors, reporting

### 1.3 Infrastructure (planned)
- Envs: dev, staging, prod
- CI/CD: lint, test, build; deploy (TBD)
- IaC: Terraform/Pulumi (TBD)
- Observability: logs, metrics, tracing (TBD)

---

## 2) Plan / Next Steps
- [ ] Step 1: Homepage in `ui/app/page.jsx` (h1 “AdNavi”, button → `/dashboard`)
- [ ] Step 2: Layouts in `ui/app/layout.jsx` and `ui/app/(dashboard)/layout.jsx`
- [ ] Step 3: Dashboard `ui/app/(dashboard)/dashboard/page.jsx`
- [ ] Prep for backend: scaffold `api/` folder with README and ADRs (no code yet)
- [ ] Future: real data, auth, analytics, CI/CD

---

## 3) Decisions (Architecture & Conventions)
- Repo style: **Monorepo-ready**; current active app: `ui/`
- Files: **.jsx** only, no TS for now
- State: none (except trivial local), mock data only
- Directory conventions:
  - `ui/components/*` — small presentational components
  - `ui/data/*` — mock data modules
  - `ui/lib/cn.js` — class util
- Charts: Recharts; Icons: lucide-react

---

## 4) Dependencies

### 4.1 Frontend (`ui/`)
- Runtime:
  - tailwindcss, postcss, autoprefixer
  - lucide-react
  - recharts
  - clsx, tailwind-merge
  - (others actually installed)
- Dev:
  - eslint config (if any)
- Notes: why each was added/removed

### 4.2 Backend (`api/`) — planned
- None yet. Record choices here when added.

---

## 5) Routes (Frontend `ui/`)
- `/` → `ui/app/page.jsx`
- `/dashboard` → `ui/app/(dashboard)/dashboard/page.jsx`

---

## 6) Components Inventory (Frontend `ui/`)
- Shell: Logo, Sidebar, SidebarSection, NavItem, WorkspaceSummary, UserMini, Topbar
- Inputs: PromptInput, QuickAction, TimeRangeChips
- Data Viz: KPIStatCard, Sparkline, LineChart
- Panels: NotificationsPanel, NotificationItem, CompanyCard, VisitorsChartCard, UseCasesList, UseCaseItem
- Primitives: Card, IconBadge, KeyValue
- Utils: cn.js
> Keep this list current with file paths.

---

## 7) Mock Data Sources (Frontend `ui/`)
- `ui/data/kpis.js`, `ui/data/notifications.js`, `ui/data/company.js`, `ui/data/visitors.js`, `ui/data/useCases.js`
> Update when shapes/labels change.

---

## 8) How Things Work (Current)
- Layout hierarchy:
  - `ui/app/layout.jsx` → global shell
  - `ui/app/(dashboard)/layout.jsx` → sidebar/header chrome
- Dashboard sections mirror wireframe; chips/CTAs non-functional.
- Charts render static arrays.

---

## 9) Open Questions
- Backend stack choice (FastAPI vs .NET)? Auth provider? Data store?
- CI/CD target platform(s)? Secrets management?

---

## 10) Known Gaps / Tech Debt
- Responsive polish <1024px TBD
- No accessibility audit yet
- No test setup

---

## 11) Changelog
- {{ISO_TIMESTAMP}} — _doc initialized_ (by AI)

Update routine (repeat every change)

READ docs/ADNAVI_BUILD_LOG.md.

SYNC PLAN if your upcoming change differs from “Plan / Next Steps”.

MAKE CHANGES in the repo.

DOCUMENT:

Add a Changelog entry (ISO time, summary, files touched).

Update sections that changed (Deps, Decisions, Routes, Components, Mock Data, Map, Gaps, Questions).

COMMIT with a message starting docs: or chore: docs mirroring the Changelog line.

Guardrails

Do not move or rename docs/ADNAVI_BUILD_LOG.md.

Keep the Monorepo Map accurate as soon as new folders (like api/) appear.

Prefer concise bullets; link code paths when helpful.